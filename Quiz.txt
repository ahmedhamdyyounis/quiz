import React, {useState, useEffect} from 'react'
import {nanoid} from 'nanoid'
import Final from './Final'
export default function Quiz() {
    // Start Pulling Data & save it to state (questions)
    const [questions, setQuestions] = useState([])
    const [currentQuestion, setCurrentQuestion] = useState(false)
    // keep track of current question
    const [activeQuestions, setActiveQuestions] = useState(0)
    // which answer user has selected
    const [selectedAnswer, setSelectedAnswer] = useState(false)
    // calculate total scores, correctAnswers, wrongAnswers.
    const [result, setResult] = useState({
        scores:0,
        correctAnswers:0,
        wrongAnswers:0
    })
    
    const [selectedIndex, setSelectedIndex] = useState(-1)
    
    
    
            // Fetch API Save questions To Questions state
            useEffect(() => {
                fetch('https://opentdb.com/api.php?amount=5&category=25&type=multiple')
                    .then(res => res.json())
                        .then(res => setQuestions(res.results.map(ele => (
                            {...ele, 
                            allAnswers:shuffleArray([ele.correct_answer,...ele.incorrect_answers])
                            
                            }))))
            },[])
            
            // Create Shuffle Array Function (Answers Shuffle) 
            function shuffleArray(array) {
                const shuffledItems = []
                const usedIndexes = []
                let i = 0
                while (i< array.length) {
                    const randomNumber = Math.floor(Math.random() * array.length)
                    if(!usedIndexes.includes(randomNumber)) {
                        shuffledItems.push(array[randomNumber])
                        usedIndexes.push(randomNumber)
                        i++
                    }
                }
                return shuffledItems
            }
            
            // Save current queston to state
            useEffect(() => {
                setCurrentQuestion(questions[activeQuestions] )
            },[questions, activeQuestions])
            
            // Display next Question (add 1 to active state)
          const next = () => {
            //   Reset selected index to -1
            setSelectedIndex(-1)
        
          setActiveQuestions(prev => prev + 1)
          
        //   Update results
        setResult(prev => {
            return selectedAnswer ?
            {
                ...prev,
                correctAnswers: prev.correctAnswers + 1,
                scores: prev.scores + 5
            }
            : {
                ...prev,
                wrongAnswers: prev.wrongAnswers + 1
            }
            
            
        })
        // End Result Update
        //??
        
          } 
        //   End Next 
    
           
           console.log(result)
            // Update Selected Answer
            const select = (answer , index, correct_answer) => {
                    setSelectedIndex(index)  
                    
                if(answer === correct_answer) {
                    
                    setSelectedAnswer(true) 
                } else {
                    setSelectedAnswer(false)
                }
                
            }
            
            
            
    return (
        <div className='quiz'>
        
        {
            questions.length    === activeQuestions? 
            // activeQuestions    === activeQuestions? 
            
            <Final
            score={result.scores}
            total={questions.length} 
            correct={result.correctAnswers}
            wrong={result.wrongAnswers}
            
            
            />
            :  
        <>
        {currentQuestion && 
        
        <div className='quiz-wrapper'>
                <h3 className='question-track'>{activeQuestions +1 }<span>/{questions.length < 10 ? `0${questions.length}` : `${questions.length}` }</span></h3>
                <h1 className='question'>{currentQuestion.question}</h1>
                    <ul className='answers-holder'>
                        {currentQuestion.allAnswers.map((ele, index) => <li className={  index === selectedIndex ? 'selected-answer answer' : 'answer'} onClick={()=> select(ele, index, currentQuestion.correct_answer)} key={nanoid()}>{ele}</li>)}
                    </ul>
                <button disabled={selectedIndex === -1} className='btn' onClick={next}>{questions.length - 1 === activeQuestions ? 'Finish' : 'Next'}</button>
        </div>
        }
        </>
        
        }
        </div>
        
    )
}